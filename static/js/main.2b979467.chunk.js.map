{"version":3,"sources":["ui/ColorCubes.js","ui/FlexboxGlobe.js","_shared/Line2DGeometry.js","ui/LineGraph.js","ui/FlexboxLineGraph.js","ui/MaterialIconFacade.js","ui/UIExample.jsx","ui/texts.js","App.js","reportWebVitals.js","index.js"],"names":["cubeMaterial","MeshStandardMaterial","roughness","metalness","cubeMesh","Mesh","BoxBufferGeometry","Cube","parent","color","this","_color","c","setInstanceUniform","Color","Instanceable3DFacade","prototype","instancedThreeObject","geom","anim","from","rotateX","Math","PI","rotateY","rotateZ","to","duration","iterations","Infinity","animPaused","Object","assign","paused","CubeOfCubes","selectedColor","cubesData","x","y","z","count","push","children","_childDef","facade","Group3DFacade","animation","ListFacade","data","template","key","d","scale","pointerStates","hover","pointerEvents","transition","easing","onMouseOver","e","hovering","afterUpdate","onMouseOut","onClick","onSelectColor","target","childDef","threeObject","visible","offsetWidth","offsetLeft","offsetTop","offsetHeight","min","clientWidth","clientHeight","sqrt","extendAsFlexNode","Globe","SphereBufferGeometry","val","_texture","material","map","dispose","Object3DFacade","FlexboxGlobe","texture","Line2DGeometry","path","opt","Array","isArray","update","closed","normals","getNormals","slice","attrPosition","getAttribute","attrNormal","attrMiter","attrDistance","attrIndex","getIndex","length","needsUpdate","indexCount","max","setAttribute","BufferAttribute","Float32Array","setIndex","Uint16Array","index","dIndex","indexArray","array","forEach","point","pointIndex","list","i","setXYZ","setX","nIndex","mIndex","n","norm","miter","setXY","BufferGeometry","LineGraph","Group","geometry","strokeMesh","ShaderMaterial","uniforms","thickness","value","opacity","transparent","vertexShader","fragmentShader","side","DoubleSide","fillMesh","gradientScale","gradientPercent","gradientExp","maxY","frustumCulled","add","pathShape","values","totalWidth","totalHeight","maxValue","apply","curveValues","xMult","yMult","valuesToSquarePoints","width","height","p1","c1","c2","p2","segmentPoints","adaptiveBezierCurve","j","valuesToCurvePoints","hasStroke","strokeWidth","strokeColor","strokeOpacity","strokeUniforms","set","hasFill","fillColor","fillOpacity","fillUniforms","fillGradientScale","fillGradientPercent","fillGradientExp","renderOrder","interpolateArray","fromValue","toValue","progress","interpolated","FlexboxLineGraph","curveChildDef","interpolate","clientLeft","clientTop","flexNodeDepth","MaterialIconFacade","font","text","fontSize","UIBlock3DFacade","INIT_ORIGIN","TABS","title","desc","GLOBE_TEXTURES","url","GRAPH_COLORS","globeAnim","mainStageAngle","backdropMaterial","texLoader","TextureLoader","buttonDef","props","Block","padding","borderRadius","flexDirection","alignItems","justifyContent","backgroundColor","icon","UIExample","load","state","tab","globeTexture","cameraVrOrigin","_onTabClick","setState","id","_onSelectColor","_onSelectGlobeTexture","_randomizeGraphData","graphData","random","_onRecenterViewClick","matrix","getCameraFacade","matrixWorld","pos","Vector3","quat","Quaternion","euler","Euler","decompose","setFromQuaternion","vr","rootTransform","find","antialias","stats","camera","lights","type","objects","backgroundMaterial","sin","left","cos","flex","overflow","margin","borderWidth","borderColor","getHexString","bind","alignSelf","concat","ColorCubes","scaleX","scaleZ","scaleY","indexOf","all","delay","top","active","React","Component","App","className","href","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b979467.chunk.js","sourcesContent":["import { ListFacade } from 'troika-core'\r\nimport { Group3DFacade, Instanceable3DFacade } from 'troika-3d'\r\nimport { extendAsFlexNode } from 'troika-3d-ui'\r\nimport { BoxBufferGeometry, Color, Mesh, MeshStandardMaterial } from 'three'\r\n\r\n\r\nconst cubeMaterial = new MeshStandardMaterial({roughness: 0.7, metalness: 0.7})\r\nconst cubeMesh = new Mesh(\r\n  new BoxBufferGeometry(1, 1, 1),\r\n  cubeMaterial\r\n)\r\nclass Cube extends Instanceable3DFacade {\r\n  constructor(parent) {\r\n    super(parent)\r\n    this.color = 0x3ba7db\r\n  }\r\n  set color(c) {\r\n    this.setInstanceUniform('diffuse', new Color(c))\r\n    this._color = c\r\n  }\r\n  get color() {\r\n    return this._color\r\n  }\r\n}\r\nCube.prototype.instancedThreeObject = cubeMesh\r\n\r\n\r\nconst anim = {\r\n  from: {rotateX: -Math.PI, rotateY: -Math.PI, rotateZ: -Math.PI},\r\n  to: {rotateX: Math.PI, rotateY: Math.PI, rotateZ: Math.PI},\r\n  duration: 10000,\r\n  iterations: Infinity\r\n}\r\nconst animPaused = Object.assign({paused: true}, anim)\r\n\r\n\r\nclass CubeOfCubes extends Group3DFacade {\r\n  constructor(parent) {\r\n    super(parent)\r\n    this.selectedColor = null\r\n\r\n    const count = 4\r\n    let cubesData = []\r\n    for (let x = 0; x < count; x++) {\r\n      for (let y = 0; y < count; y++) {\r\n        for (let z = 0; z < count; z++) {\r\n          if (x*y*z === 0 || x === count-1 || y === count-1 || z === count-1) {\r\n            cubesData.push({\r\n              color: ((64 + x / count * 128) << 16) | ((64 + y / count * 128) << 8) | (64 + z / count * 128),\r\n              x: -0.5 + x / (count - 1),\r\n              y: -0.5 + y / (count - 1),\r\n              z: -0.5 + z / (count - 1)\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n    this.children = this._childDef = {\r\n      facade: Group3DFacade,\r\n      animation: anim,\r\n      children: {\r\n        facade: ListFacade,\r\n        data: cubesData,\r\n        template: {\r\n          key: d => d.color,\r\n          facade: Cube,\r\n          color: d => d.color,\r\n          x: d => this.selectedColor === d.color ? 0 : d.x,\r\n          y: d => this.selectedColor === d.color ? 0 : d.y,\r\n          z: d => this.selectedColor === d.color ? 0 : d.z,\r\n          scale: d => this.selectedColor === d.color ? 1.3 : 1 / (count - 1) / 2,\r\n          pointerStates: d => this.selectedColor ? {} : {\r\n            hover: {\r\n              //color: 0xffffff,\r\n              scale: 1 / (count - 1) / 1.6\r\n            }\r\n          },\r\n          pointerEvents: true,\r\n          transition: {\r\n            x: {duration: 500, easing: 'easeOutBounce'},\r\n            y: {duration: 500, easing: 'easeOutBounce'},\r\n            z: {duration: 500, easing: 'easeOutBounce'},\r\n            scale: {duration: 500, easing: 'easeOutBounce'}\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.onMouseOver = e => {\r\n      this.hovering = true\r\n      this.afterUpdate()\r\n    }\r\n    this.onMouseOut = e => {\r\n      this.hovering = false\r\n      this.afterUpdate()\r\n    }\r\n    this.onClick = e => {\r\n      this.onSelectColor(this.selectedColor == null ? e.target.color : null)\r\n    }\r\n  }\r\n\r\n  afterUpdate() {\r\n    const childDef = this._childDef\r\n    this.threeObject.visible = this.offsetWidth != null\r\n    childDef.animation = (this.hovering) ? animPaused : anim\r\n\r\n    // Center within the layed out box\r\n    this.x = this.offsetLeft + this.offsetWidth / 2\r\n    this.y = -(this.offsetTop + this.offsetHeight / 2)\r\n    childDef.scale = Math.min(this.clientWidth, this.clientHeight) / Math.sqrt(2)\r\n    super.afterUpdate()\r\n  }\r\n}\r\n\r\nexport default extendAsFlexNode(CubeOfCubes)\r\n","import { Object3DFacade, Group3DFacade } from 'troika-3d'\r\nimport { extendAsFlexNode } from 'troika-3d-ui'\r\nimport { Mesh, MeshStandardMaterial, SphereBufferGeometry } from 'three'\r\n\r\n\r\nlet geom\r\n\r\n\r\nclass Globe extends Object3DFacade {\r\n  initThreeObject() {\r\n    return new Mesh(\r\n      geom || (geom = new SphereBufferGeometry(0.5, 64, 64)),\r\n      new MeshStandardMaterial({\r\n        roughness: 0.5,\r\n        metalness: 0.5\r\n      })\r\n    )\r\n  }\r\n\r\n  set texture(val) {\r\n    if (val !== this._texture) {\r\n      this._texture = val\r\n      const material = this.threeObject.material\r\n      if (material.map) {\r\n        material.map.dispose()\r\n      }\r\n      material.map = val\r\n    }\r\n  }\r\n}\r\n\r\n\r\nclass FlexboxGlobe extends Group3DFacade {\r\n  constructor(parent) {\r\n    super(parent)\r\n    this._childDef = {\r\n      facade: Globe\r\n    }\r\n  }\r\n\r\n  afterUpdate() {\r\n    const childDef = this._childDef\r\n    this.children = this.offsetWidth == null ? null : childDef\r\n\r\n    // Center the globe within the layed out box\r\n    this.x = this.offsetLeft + this.offsetWidth / 2\r\n    this.y = -(this.offsetTop + this.offsetHeight / 2)\r\n    childDef.scale = Math.min(this.clientWidth, this.clientHeight)\r\n    childDef.texture = this.texture\r\n    super.afterUpdate()\r\n  }\r\n}\r\n\r\nexport default extendAsFlexNode(FlexboxGlobe)\r\n","import { BufferAttribute, BufferGeometry } from 'three'\r\nimport getNormals from 'polyline-normals'\r\n\r\n/*\r\n\r\nThis is a copy of https://github.com/mattdesl/three-line-2d/blob/c0da016db3fcf9e9a6ebef8063fd7e8334af0ace/index.js\r\nthat has been modified for compatibility with later Three.js versions. Original MIT license applies.\r\n\r\nChanges:\r\n- addAttribute -> setAttribute\r\n- buffer attributes are fully replaced rather than replacing just their .array\r\n- changed to a ES6 class\r\n\r\n*/\r\n\r\nvar VERTS_PER_POINT = 2;\r\n\r\nclass Line2DGeometry extends BufferGeometry {\r\n  constructor (path, opt) {\r\n    super()\r\n\r\n    if (Array.isArray(path)) {\r\n      opt = opt || {}\r\n    } else if (typeof path === 'object') {\r\n      opt = path\r\n      path = []\r\n    }\r\n\r\n    opt = opt || {}\r\n\r\n    // this.setAttribute('position', new BufferAttribute(undefined, 3));\r\n    // this.setAttribute('lineNormal', new BufferAttribute(undefined, 2));\r\n    // this.setAttribute('lineMiter', new BufferAttribute(undefined, 1));\r\n    // if (opt.distances) {\r\n    //   this.setAttribute('lineDistance', new BufferAttribute(undefined, 1));\r\n    // }\r\n    // this.setIndex(new BufferAttribute(undefined, 1));\r\n\r\n    this.update(path, opt.closed)\r\n  }\r\n\r\n  // Patch overwriting of BufferAttribute.array, which is no longer supported and causes errors:\r\n  update (path, closed) {\r\n    path = path || []\r\n    var normals = getNormals(path, closed)\r\n\r\n    if (closed) {\r\n      path = path.slice()\r\n      path.push(path[0])\r\n      normals.push(normals[0])\r\n    }\r\n\r\n    var attrPosition = this.getAttribute('position')\r\n    var attrNormal = this.getAttribute('lineNormal')\r\n    var attrMiter = this.getAttribute('lineMiter')\r\n    var attrDistance = this.getAttribute('lineDistance')\r\n    var attrIndex = this.getIndex()\r\n\r\n    if (!attrPosition ||\r\n      (path.length !== attrPosition.count / VERTS_PER_POINT)) {\r\n      var count = path.length * VERTS_PER_POINT\r\n      var indexCount = Math.max(0, (path.length - 1) * 6)\r\n      this.setAttribute('position', attrPosition = new BufferAttribute(new Float32Array(count * 3), 3))\r\n      this.setAttribute('lineNormal', attrNormal = new BufferAttribute(new Float32Array(count * 2), 2))\r\n      this.setAttribute('lineMiter', attrMiter = new BufferAttribute(new Float32Array(count), 1))\r\n      this.setIndex(attrIndex = new BufferAttribute(new Uint16Array(indexCount), 1))\r\n\r\n      if (attrDistance) {\r\n        this.setAttribute('lineDistance', attrDistance = new BufferAttribute(new Float32Array(count), 1))\r\n      }\r\n    } else {\r\n      attrPosition.needsUpdate = true\r\n      attrNormal.needsUpdate = true\r\n      attrMiter.needsUpdate = true\r\n      attrIndex.needsUpdate = true\r\n      if (attrDistance) {\r\n        attrDistance.needsUpdate = true\r\n      }\r\n    }\r\n\r\n    var index = 0\r\n    var c = 0\r\n    var dIndex = 0\r\n    var indexArray = attrIndex.array\r\n\r\n    path.forEach(function (point, pointIndex, list) {\r\n      var i = index\r\n      indexArray[c++] = i + 0\r\n      indexArray[c++] = i + 1\r\n      indexArray[c++] = i + 2\r\n      indexArray[c++] = i + 2\r\n      indexArray[c++] = i + 1\r\n      indexArray[c++] = i + 3\r\n\r\n      attrPosition.setXYZ(index++, point[0], point[1], 0)\r\n      attrPosition.setXYZ(index++, point[0], point[1], 0)\r\n\r\n      if (attrDistance) {\r\n        var d = pointIndex / (list.length - 1)\r\n        attrDistance.setX(dIndex++, d)\r\n        attrDistance.setX(dIndex++, d)\r\n      }\r\n    })\r\n\r\n    var nIndex = 0\r\n    var mIndex = 0\r\n    normals.forEach(function (n) {\r\n      var norm = n[0]\r\n      var miter = n[1]\r\n      attrNormal.setXY(nIndex++, norm[0], norm[1])\r\n      attrNormal.setXY(nIndex++, norm[0], norm[1])\r\n\r\n      attrMiter.setX(mIndex++, -miter)\r\n      attrMiter.setX(mIndex++, miter)\r\n    })\r\n  }\r\n}\r\n\r\nexport default Line2DGeometry\r\n","import {\r\n  BufferAttribute,\r\n  BufferGeometry,\r\n  Color,\r\n  Mesh,\r\n  ShaderMaterial,\r\n  DoubleSide,\r\n  Group\r\n} from \"three\";\r\nimport { Object3DFacade } from \"troika-3d\";\r\nimport adaptiveBezierCurve from \"adaptive-bezier-curve\";\r\nimport Line2DGeometry from '../_shared/Line2DGeometry'\r\n\r\nconst strokeVertexShader = `\r\n// Basic three-line-2d vertex shader for the line stroke\r\n\r\nuniform float thickness;\r\nattribute float lineMiter;\r\nattribute vec2 lineNormal;\r\n\r\nvoid main() {\r\n  vec3 pointPos = position.xyz + vec3(lineNormal * thickness / 2.0 * lineMiter, 0.0);\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pointPos, 1.0);\r\n}\r\n`;\r\n\r\nconst strokeFragmentShader = `\r\n// Basic three-line-2d fragment shader for the line stroke\r\n\r\nuniform vec3 color;\r\nuniform float opacity;\r\n\r\nvoid main() {\r\n  gl_FragColor = vec4(color, opacity);\r\n}\r\n`;\r\n\r\nconst fillVertexShader = `\r\n// Vertex shader for the three-line-2d geometry that drops its down-facing vertices\r\n// to the bottom line, thereby creating a mesh covering the curve's fill area\r\n\r\nuniform int gradientScale; //0 = per value, 1 = max value\r\nuniform float maxY;\r\n\r\nattribute float lineMiter;\r\n\r\nvarying float varGradientTopY;\r\nvarying float varY;\r\n\r\nvoid main() {\r\n  // Drop all vertexes forming the bottom of triangles down to y:0\r\n  float y = lineMiter < 0.0 ? 0.0 : position.y;\r\n\r\n  // Pass along values for gradient distance calculation\r\n  varGradientTopY = gradientScale == 1 ? maxY : position.y;\r\n  varY = y;\r\n\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position.x, y, 0.0, 1.0);\r\n}\r\n`;\r\n\r\nconst fillFragmentShader = `\r\n// Fragment shader for the curve's fill area. Handles both solid color and gradient fill styles.\r\n\r\nuniform vec3 color;\r\nuniform float opacity;\r\nuniform float gradientPercent;\r\nuniform float gradientExp;\r\n\r\nvarying float varGradientTopY;\r\nvarying float varY;\r\n\r\nvoid main() {\r\n  float alpha = opacity;\r\n\r\n  // If a gradient is defined, calculate the varying opacity for the current y value\r\n  if (gradientPercent > 0.0) {\r\n    float gradPos = smoothstep(varGradientTopY - varGradientTopY * gradientPercent, varGradientTopY, varY);\r\n    alpha = opacity * pow(gradPos, max(gradientExp, 1.0));\r\n  }\r\n\r\n  gl_FragColor = vec4(color, alpha);\r\n}\r\n`;\r\n\r\n// Given an array of y values, construct a smooth curve connecting those points.\r\nfunction valuesToCurvePoints(values, totalWidth, totalHeight) {\r\n  let p1 = [];\r\n  let c1 = [];\r\n  let c2 = [];\r\n  let p2 = [];\r\n  let maxValue = Math.max.apply(Math, values);\r\n  let curveValues = [];\r\n  for (let i = 1; i < values.length; i++) {\r\n    let xMult = totalWidth / (values.length - 1);\r\n    let yMult = totalHeight / maxValue;\r\n    p1[0] = (i - 1) * xMult;\r\n    p1[1] = c1[1] = values[i - 1] * yMult;\r\n    c1[0] = c2[0] = (i - 0.5) * xMult;\r\n    c2[1] = p2[1] = values[i] * yMult;\r\n    p2[0] = i * xMult;\r\n    let segmentPoints = adaptiveBezierCurve(p1, c1, c2, p2);\r\n    for (let j = i === 1 ? 0 : 1; j < segmentPoints.length; j++) {\r\n      curveValues.push(segmentPoints[j]);\r\n    }\r\n  }\r\n  return curveValues;\r\n}\r\n\r\n// Given an array of y values, construct a step path connecting those points.\r\nfunction valuesToSquarePoints(values, totalWidth, totalHeight) {\r\n  let maxValue = Math.max.apply(Math, values);\r\n  let curveValues = [];\r\n  for (let i = 0; i < values.length; i++) {\r\n    let xMult = totalWidth / (values.length - 1);\r\n    let yMult = totalHeight / maxValue;\r\n    if (i > 0) {\r\n      curveValues.push([i * xMult, values[i - 1] * yMult]);\r\n    }\r\n    curveValues.push([i * xMult, values[i] * yMult]);\r\n  }\r\n  return curveValues;\r\n}\r\n\r\n// Facade for the curve.\r\nexport default class LineGraph extends Object3DFacade {\r\n  constructor(parent) {\r\n    super(parent, new Group());\r\n\r\n    // Use a single Line2D buffer geometry for both stroke and fill meshes\r\n    let geometry = new Line2DGeometry();\r\n\r\n    // Stroke mesh with custom shader material\r\n    this.strokeMesh = new Mesh(\r\n      geometry,\r\n      new ShaderMaterial({\r\n        uniforms: {\r\n          thickness: { value: 1 },\r\n          color: { value: new Color() },\r\n          opacity: { value: 1 }\r\n        },\r\n        transparent: true,\r\n        vertexShader: strokeVertexShader,\r\n        fragmentShader: strokeFragmentShader,\r\n        //depthTest: false,\r\n        side: DoubleSide\r\n      })\r\n    );\r\n\r\n    // Fill mesh with custom shader material\r\n    this.fillMesh = new Mesh(\r\n      geometry,\r\n      new ShaderMaterial({\r\n        uniforms: {\r\n          color: { value: new Color() },\r\n          opacity: { value: 1 },\r\n          gradientScale: { value: 1 },\r\n          gradientPercent: { value: 1 },\r\n          gradientExp: { value: 1 },\r\n          maxY: { value: 1 }\r\n        },\r\n        transparent: true,\r\n        vertexShader: fillVertexShader,\r\n        fragmentShader: fillFragmentShader,\r\n        //depthTest: false,\r\n        side: DoubleSide\r\n      })\r\n    );\r\n    this.strokeMesh.frustumCulled = this.fillMesh.frustumCulled = false;\r\n\r\n    // Add both meshes to the Group\r\n    this.threeObject.add(this.strokeMesh, this.fillMesh);\r\n  }\r\n\r\n  afterUpdate() {\r\n    // Update the shared geometry\r\n    let geometry = this.strokeMesh.geometry;\r\n    geometry.update(\r\n      this.pathShape === \"step\"\r\n        ? valuesToSquarePoints(this.values, this.width, this.height)\r\n        : valuesToCurvePoints(this.values, this.width, this.height)\r\n    );\r\n\r\n    // Update the stroke mesh\r\n    let hasStroke =\r\n      this.strokeWidth && this.strokeColor && this.strokeOpacity > 0;\r\n    if (hasStroke) {\r\n      let strokeUniforms = this.strokeMesh.material.uniforms;\r\n      strokeUniforms.color.value.set(this.strokeColor);\r\n      strokeUniforms.opacity.value = this.strokeOpacity;\r\n      strokeUniforms.thickness.value = this.strokeWidth;\r\n    }\r\n    this.strokeMesh.visible = !!hasStroke;\r\n\r\n    // Update the fill mesh\r\n    let hasFill = this.fillColor && this.fillOpacity > 0;\r\n    if (hasFill) {\r\n      let fillUniforms = this.fillMesh.material.uniforms;\r\n      fillUniforms.color.value.set(this.fillColor);\r\n      fillUniforms.opacity.value = this.fillOpacity;\r\n      fillUniforms.gradientScale.value =\r\n        this.fillGradientScale === \"max-value\" ? 1 : 0;\r\n      fillUniforms.maxY.value = this.height;\r\n      fillUniforms.gradientPercent.value = this.fillGradientPercent || 0;\r\n      fillUniforms.gradientExp.value = this.fillGradientExp || 1;\r\n    }\r\n    this.fillMesh.visible = !!hasFill;\r\n\r\n    this.fillMesh.renderOrder = this.strokeMesh.renderOrder =\r\n      this.renderOrder || 0;\r\n\r\n    super.afterUpdate();\r\n  }\r\n}\r\n\r\n// defaults\r\nObject.assign(LineGraph.prototype, {\r\n  width: 500,\r\n  height: 100,\r\n  strokeWidth: 2,\r\n  strokeColor: 0xffffff,\r\n  strokeOpacity: 1,\r\n  fillColor: 0xffffff,\r\n  fillOpacity: 0.5,\r\n  fillGradientScale: \"per-value\", //or 'max-value'\r\n  fillGradientPercent: 1,\r\n  fillGradientExp: 3,\r\n  pathShape: \"curve\" //or 'step'\r\n});\r\n","import LineGraph from './LineGraph'\r\nimport { Group3DFacade } from 'troika-3d'\r\nimport { extendAsFlexNode } from 'troika-3d-ui'\r\n\r\n\r\nfunction interpolateArray(fromValue, toValue, progress) {\r\n  let interpolated = new Float32Array(toValue.length)\r\n  for (let i = interpolated.length; i--; ) {\r\n    let from = i < fromValue.length ? fromValue[i] : 0\r\n    interpolated[i] = from + (toValue[i] - from) * progress\r\n  }\r\n  return interpolated\r\n}\r\n\r\n\r\n\r\nclass FlexboxLineGraph extends Group3DFacade {\r\n  constructor(parent) {\r\n    super(parent)\r\n\r\n    this.curveChildDef = {\r\n      key: 'curve',\r\n      facade: LineGraph,\r\n      values: [],\r\n      transition: {\r\n        values: {\r\n          duration: 1000,\r\n          easing: 'easeInOutCubic',\r\n          interpolate: interpolateArray\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  afterUpdate() {\r\n    if (this.offsetWidth) {\r\n      const childDef = this.curveChildDef\r\n      childDef.values = this.values\r\n      this.x = this.offsetLeft + this.clientLeft\r\n      this.y = -(this.offsetTop + this.clientTop + this.clientHeight)\r\n      childDef.width = this.clientWidth\r\n      childDef.height = this.clientHeight\r\n      childDef.strokeColor = childDef.fillColor = this.color\r\n      childDef.renderOrder = this.flexNodeDepth\r\n      this.children = childDef\r\n    }\r\n    super.afterUpdate()\r\n  }\r\n}\r\n\r\nexport default extendAsFlexNode(FlexboxLineGraph)\r\n","import {UIBlock3DFacade} from 'troika-3d-ui'\r\n\r\n/**\r\n * Convenience class for displaying icons using the Material Icons library. See https://material.io/icons/\r\n *\r\n * Use this just like any other UIBlock3DFacade, but set its `icon` property to the name of the icon\r\n * you wish to display.\r\n *\r\n * Note: internally this simply sets the 'text' property, using the Material Icons web font. Since that\r\n * font utilizes ligatures to alias each icon's full name to its glyph, and Troika's text rendering engine\r\n * has support for ligatures, this just works without having to deal with obscure character codes.\r\n */\r\nexport default class MaterialIconFacade extends UIBlock3DFacade {\r\n  constructor(parent) {\r\n    super(parent)\r\n\r\n    // Material Icons font URL\r\n    this.font = 'https://fonts.gstatic.com/s/materialicons/v36/flUhRq6tzZclQEJ-Vdg-IuiaDsNa.woff'\r\n  }\r\n\r\n  set icon(val) {\r\n    this.text = val\r\n  }\r\n  set size(val) {\r\n    this.fontSize = val\r\n  }\r\n}","import React from 'react'\r\nimport { Canvas3D, Group3DFacade } from 'troika-3d'\r\nimport { UIBlock3DFacade as Block } from 'troika-3d-ui'\r\nimport { paleBlueDot } from './texts'\r\nimport ColorCubes from './ColorCubes'\r\nimport FlexboxGlobe from './FlexboxGlobe'\r\nimport FlexboxLineGraph from './FlexboxLineGraph'\r\nimport { default as Icon } from './MaterialIconFacade'\r\nimport { Color, MeshStandardMaterial, TextureLoader, Vector3, Quaternion, Euler } from 'three'\r\n\r\n\r\nconst INIT_ORIGIN = {\r\n  x: 0,\r\n  y: 0,\r\n  z: 0,\r\n  rotateY: 0\r\n}\r\n\r\nconst TABS = [\r\n  {\r\n    key: 'colors',\r\n    title: 'Colors',\r\n    desc: 'Select a color from the cubes to show its value.'\r\n  },\r\n  {\r\n    key: 'globe',\r\n    title: 'Globes',\r\n    desc: paleBlueDot\r\n  },\r\n  {\r\n    key: 'graph',\r\n    title: 'Graphs',\r\n    desc: 'Line graphs stacked in the depth dimension'\r\n  }\r\n]\r\n\r\nconst GLOBE_TEXTURES = [\r\n  {\r\n    title: 'Day',\r\n    url: 'globe/texture_day.jpg'\r\n  },\r\n  {\r\n    title: 'Night',\r\n    url: 'globe/texture_night.jpg'\r\n  },\r\n  {\r\n    title: 'Blue Marble',\r\n    url: 'globe/texture_bluemarble.jpg'\r\n  },\r\n  {\r\n    title: 'Pumpkin',\r\n    url: 'globe/texture_pumpkin.jpg'\r\n  }\r\n]\r\n\r\n\r\n\r\nconst GRAPH_COLORS = [0x996600, 0x009966, 0x006699, 0x669900, 0x660099]\r\nconst GRAPH_POINTS = 36\r\n\r\nconst globeAnim = [\r\n  {\r\n    from: {scale: 0.001},\r\n    to: {scale: 1},\r\n    easing: 'easeOutExpo'\r\n  },\r\n  {\r\n    from: {rotateY: 0},\r\n    to: {rotateY: Math.PI * 2},\r\n    duration: 20000,\r\n    iterations: Infinity\r\n  }\r\n]\r\n\r\nconst mainStageAngle = -Math.PI / 2.2\r\n\r\nconst backdropMaterial = new MeshStandardMaterial({roughness: 0.6, metalness: 0.8})\r\n\r\nconst texLoader = new TextureLoader()\r\n\r\nfunction loadTextures() {\r\n  GLOBE_TEXTURES.forEach(d => {\r\n    if (!d.texture) {\r\n      d.texture = texLoader.load(d.url)\r\n    }\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\nclass UIExample extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    loadTextures()\r\n\r\n    this.state = {\r\n      tab: 'colors',\r\n      globeTexture: GLOBE_TEXTURES[0],\r\n      cameraVrOrigin: INIT_ORIGIN\r\n    }\r\n\r\n    this._onTabClick = e => {\r\n      this.setState({\r\n        tab: e.target.id,\r\n        selectedColor: null\r\n      })\r\n    }\r\n    this._onSelectColor = selectedColor => {\r\n      this.setState({selectedColor})\r\n    }\r\n    this._onSelectGlobeTexture = globeTexture => {\r\n      this.setState({globeTexture})\r\n    }\r\n    this._randomizeGraphData = () => {\r\n      this.setState({\r\n        graphData: GRAPH_COLORS.map(color => {\r\n          const values = []\r\n          for (let i = GRAPH_POINTS; i--;) {\r\n            values[i] = Math.random() * 10 + 5\r\n          }\r\n          return {color, values}\r\n        })\r\n      })\r\n    }\r\n    this._onRecenterViewClick = e => {\r\n      const matrix = e.target.getCameraFacade().threeObject.matrixWorld\r\n      const pos = new Vector3()\r\n      const quat = new Quaternion()\r\n      const euler = new Euler()\r\n      matrix.decompose(pos, quat, new Vector3())\r\n      euler.setFromQuaternion(quat)\r\n      this.setState({\r\n        cameraVrOrigin: {\r\n          x: pos.x,\r\n          y: pos.y,\r\n          z: pos.z,\r\n          rotateY: euler.y\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._randomizeGraphData()\r\n  }\r\n\r\n  render() {\r\n    const {props, state} = this\r\n    const vr = props.vr\r\n    const rootTransform = vr ? state.cameraVrOrigin : INIT_ORIGIN\r\n    const tab = TABS.find(d => d.key === state.tab)\r\n\r\n    return <div>\r\n      <Canvas3D\r\n        antialias\r\n        backgroundColor={0}\r\n        stats={ props.stats }\r\n        width={ props.width }\r\n        height={ props.height }\r\n        camera={ {\r\n          z: vr ? 0 : 0.5\r\n        } }\r\n        lights={[\r\n          {type: 'point', x: 1},\r\n          {type: 'point', x: -1}\r\n        ]}\r\n        objects={[\r\n          Object.assign({}, rootTransform, {\r\n            key: 'root',\r\n            facade: Group3DFacade,\r\n            children: [\r\n              <Block\r\n                key=\"uiRoot\"\r\n                flexDirection=\"column\"\r\n                alignItems=\"center\"\r\n                fontSize={20}\r\n                width={1280}\r\n                scale={1 / 640} //640 units within ui = 1 meter\r\n                x={-1}\r\n                y={0.3}\r\n                z={-1.4}\r\n              >\r\n                <Block\r\n                  key=\"topRow\"\r\n                  height={320}\r\n                  flexDirection=\"row\"\r\n                >\r\n                  <Block\r\n                    key=\"titleAndDesc\"\r\n                    backgroundMaterial={backdropMaterial}\r\n                    backgroundColor={0x333333}\r\n                    flexDirection=\"column\"\r\n                    alignItems=\"stretch\"\r\n                    width={320}\r\n                    rotateY={Math.PI / 8}\r\n                    z={320 * Math.sin(Math.PI / 8)}\r\n                    left={320 - 320 * Math.cos(Math.PI / 8)}\r\n                  >\r\n                    <Block\r\n                      backgroundMaterial={backdropMaterial}\r\n                      backgroundColor={0x444444}\r\n                      fontSize={30}\r\n                      padding={[10, 20]}\r\n                    >{tab.title}</Block>\r\n                    <Block padding={20} flex={1} overflow=\"scroll\">\r\n                      {tab.desc}\r\n                    </Block>\r\n                  </Block>\r\n\r\n                  <Block\r\n                    key=\"backdrop\"\r\n                    width={640}\r\n                    backgroundMaterial={backdropMaterial}\r\n                    backgroundColor={0x333333}\r\n                  />\r\n\r\n                  <Block\r\n                    key=\"options\"\r\n                    backgroundMaterial={backdropMaterial}\r\n                    backgroundColor={0x333333}\r\n                    flexDirection=\"column\"\r\n                    width={320}\r\n                    rotateY={-Math.PI / 8}\r\n                    padding={20}\r\n                  >\r\n                    {\r\n                      tab.key === 'colors' ? (\r\n                        state.selectedColor == null ? null : [\r\n                          <Block key=\"title\"\r\n                            margin={[20, 0]}\r\n                          >Selected Color:</Block>,\r\n                          <Block key=\"info\"\r\n                            flex={1}\r\n                            flexDirection=\"row\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Block\r\n                              key=\"swatch\"\r\n                              width={64}\r\n                              height={64}\r\n                              backgroundColor={state.selectedColor}\r\n                              borderWidth={2}\r\n                              borderColor={0xffffff}\r\n                              margin={[0, 10, 0, 0]}\r\n                              z={50}\r\n                            />\r\n                            <Block fontSize={30}>{'#' + new Color(state.selectedColor).getHexString()}</Block>\r\n                          </Block>,\r\n                          buttonDef({\r\n                            key: 'back',\r\n                            onClick: this._onSelectColor.bind(this, null),\r\n                            margin: [10, 5],\r\n                            alignSelf: \"flex-start\",\r\n                            fontSize: 24,\r\n                            icon: 'arrow_back',\r\n                            text: 'Back'\r\n                          })\r\n                        ]\r\n                      ) : tab.key === 'globe' ? (\r\n                        [\r\n                          <Block key=\"title\"\r\n                            margin={[20, 0]}\r\n                          >Choose a Texture:</Block>\r\n                        ].concat(GLOBE_TEXTURES.map((d, i) =>\r\n                          <Block\r\n                            key={i}\r\n                            flexDirection=\"row\"\r\n                            alignItems=\"center\"\r\n                            padding={[4, 0]}\r\n                            color={0xffffff}\r\n                            pointerStates={{hover: {color: 0x00ccff}}}\r\n                            onClick={this._onSelectGlobeTexture.bind(this, d)}\r\n                          >\r\n                            <Icon icon={'radio_button_' + (d === state.globeTexture ? 'checked' : 'unchecked')} /> {d.title}\r\n                          </Block>\r\n                        ))\r\n                      ) : tab.key === 'graph' ? (\r\n                        buttonDef({\r\n                          onClick: this._randomizeGraphData,\r\n                          fontSize: 24,\r\n                          text: 'Randomize Data'\r\n                        })\r\n                      ) : ''\r\n                    }\r\n                  </Block>\r\n\r\n                </Block>\r\n\r\n                <Block\r\n                  key=\"mainStage\"\r\n                  width={640}\r\n                  height={640}\r\n                  rotateX={mainStageAngle}\r\n                  borderWidth={3}\r\n                  borderColor={0x999999}\r\n                  borderRadius={[0, 0, 10, 10]}\r\n                >\r\n                  {/*<Block\r\n                    key={tab.key}\r\n                    flex={1}\r\n                    animation={stageEnterAnim}\r\n                    exitAnimation={stageExitAnim}\r\n                  >*/}\r\n                    {\r\n                      tab.key === 'colors' ? (\r\n                        <ColorCubes\r\n                          flex={1}\r\n                          margin={180}\r\n                          z={120}\r\n                          selectedColor={state.selectedColor}\r\n                          onSelectColor={this._onSelectColor}\r\n                          animation={{\r\n                            from: {scale: 0.001},\r\n                            to: {scale: 1},\r\n                            easing: 'easeOutExpo'\r\n                          }}\r\n                        />\r\n                      ) : tab.key === 'globe' ? (\r\n                        <FlexboxGlobe\r\n                          flex={1}\r\n                          margin={150}\r\n                          z={120}\r\n                          rotateX={-mainStageAngle}\r\n                          scaleX={1}\r\n                          scaleZ={1}\r\n                          scaleY={state.globeTexture.url.indexOf('pumpkin') > -1 ? 0.6 : 1}\r\n                          texture={state.globeTexture.texture}\r\n                          animation={globeAnim}\r\n                          transition={{scaleY: true, scaleX: true, scaleZ: true}}\r\n                        />\r\n                      ) : tab.key === 'graph' ? (\r\n                        state.graphData.map((d, i, all) =>\r\n                          <FlexboxLineGraph\r\n                            key={i}\r\n                            flex={1}\r\n                            margin={[10, 0]}\r\n                            color={d.color}\r\n                            values={d.values}\r\n                            animation={{\r\n                              from: {rotateX: 0, z: 0},\r\n                              to: {rotateX: -mainStageAngle, z: (all.length - i - 1) * 20},\r\n                              duration: 750,\r\n                              delay: (all.length - i - 1) * 100,\r\n                              easing: 'easeOutExpo'\r\n                            }}\r\n                          />\r\n                        )\r\n                      ) : ''\r\n                    }\r\n                  {/*</Block>*/}\r\n                </Block>\r\n\r\n                <Block\r\n                  key=\"tabs\"\r\n                  flexDirection=\"row\"\r\n                  justifyContent=\"center\"\r\n                  width={640}\r\n                  z={-Math.sin(mainStageAngle) * 640}\r\n                  top={-640 + 640 * Math.cos(mainStageAngle)}\r\n                  rotateX={-Math.PI / 4}\r\n                >\r\n                  {\r\n                    TABS.map(d => {\r\n                      const active = state.tab === d.key\r\n                      return buttonDef({\r\n                        key: d.key,\r\n                        id: d.key,\r\n                        onClick: this._onTabClick,\r\n                        margin: [10, 5],\r\n                        fontSize: 15,\r\n                        backgroundColor: active ? 0x00ccff : 0x666666,\r\n                        pointerEvents: !active,\r\n                        z: active ? 10 : 0,\r\n                        text: d.title\r\n                      })\r\n                    })\r\n                  }\r\n                </Block>\r\n\r\n                {vr ? buttonDef({\r\n                  onClick: this._onRecenterViewClick,\r\n                  icon: 'sync',\r\n                  text: 'Recenter View',\r\n                  alignSelf: 'center',\r\n                  backgroundColor: 0,\r\n                  color: 0x333333,\r\n                  fontSize: 24,\r\n                  rotateX: -Math.PI / 4,\r\n                  pointerStates: {\r\n                    hover: {\r\n                      backgroundColor: 0x666666,\r\n                      color: 0xffffff\r\n                    }\r\n                  }\r\n                }) : null}\r\n              </Block>\r\n            ]\r\n          })\r\n        ]}\r\n      />\r\n    </div>\r\n  }\r\n}\r\n\r\n\r\nfunction buttonDef(props) {\r\n  return Object.assign({\r\n    facade: Block,\r\n    padding: [5, 10],\r\n    borderRadius: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    justifyContent: 'center',\r\n    backgroundColor: 0x00ccff,\r\n    pointerStates: {\r\n      hover: {\r\n        backgroundColor: 0x0099cc\r\n      }\r\n    },\r\n    transition: {\r\n      z: true,\r\n      color: {interpolate: 'color'},\r\n      backgroundColor: {interpolate: 'color'}\r\n    },\r\n    children: [\r\n      props.icon ? <Icon icon={props.icon} /> : null,\r\n      props.text\r\n    ]\r\n  }, props, {text: null, icon: null})\r\n}\r\n\r\n\r\nexport default UIExample\r\n","export const paleBlueDot = `\"From this distant vantage point, the Earth might not seem of any particular interest. But for us, it's different. Consider again that dot. That's here. That's home. That's us.\r\n\r\nOn it everyone you love, everyone you know, everyone you ever heard of, every human being who ever was, lived out their lives.\r\n\r\nThe aggregate of our joy and suffering, thousands of confident religions, ideologies, and economic doctrines, every hunter and forager, every hero and coward, every creator and destroyer of civilization, every king and peasant, every young couple in love, every mother and father, hopeful child, inventor and explorer, every teacher of morals, every corrupt politician, every 'superstar,' every 'supreme leader,' every saint and sinner in the history of our species lived there - on a mote of dust suspended in a sunbeam.\"\r\n\r\n- Carl Sagan`","import './App.css';\nimport UIExample from './ui/UIExample'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <UIExample width=\"800\" height=\"600\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Hello Telstra\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}